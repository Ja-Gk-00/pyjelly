[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[project]
name = "pyjelly"
dynamic = ["version"]
readme = "README.md"
description = "Jelly-RDF implementation for Python"
authors = [
    { name = "NeverBlink et al.", email = "contact@neverblink.eu" }
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Environment :: Console",
    "Environment :: Plugins",
    "Topic :: Database",
    "Topic :: File Formats",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["RDF", "Knowledge graph", "Jelly", "Serialization format"]
license = "Apache-2.0"
dependencies = [
    "protobuf>=6.30.0",
    "typing-extensions>=4.12.2", # revisit after 3.13 is older
]

[project.urls]
Homepage = "https://w3id.org/jelly/pyjelly"
Documentation = "https://w3id.org/jelly/pyjelly"
Repository = "https://github.com/Jelly-RDF/pyjelly"
Issues = "https://github.com/Jelly-RDF/pyjelly/issues"
Changelog = "https://github.com/Jelly-RDF/pyjelly/releases"

[project.optional-dependencies]
rdflib = ["rdflib>=7.1.4"]

[project.entry-points."rdf.plugins.parser"]
jelly = "pyjelly.integrations.rdflib.parse:RDFLibJellyParser"
"application/x-jelly-rdf" = "pyjelly.integrations.rdflib.parse:RDFLibJellyParser"

[project.entry-points."rdf.plugins.serializer"]
jelly = "pyjelly.integrations.rdflib.serialize:RDFLibJellySerializer"
"application/x-jelly-rdf" = "pyjelly.integrations.rdflib.serialize:RDFLibJellySerializer"

[dependency-groups]
dev = ["mypy>=1.13.0", "pre-commit>=4.2.0", "ruff>=0.11.8"]
# grpc doesn't support PyPy at the time of writing, see grpc/grpc#4221
protoc = ["grpcio-tools>=1.73.0; implementation_name != 'pypy'"]
profiling = ["scalene>=1.5.51", "memray>=1.16.0"]
test = [
    "detect-test-pollution>=1.2.0",
    "hypothesis>=6.131.0",
    "inline-snapshot>=0.20.8",
    "pytest>=8.3.4",
    "pytest-cov>=6.2.1",
    "pytest-accept>=0.1.12",
    "pytest-mock>=3.14.0",
    "pytest-subtests>=0.14.1",
    "pytest-sugar>=1.0.0",
]
extras = ["pyjelly[rdflib]"] # workaround for astral-sh/uv#8607
types = ["types-protobuf>=5.29.1.20250315"]
docs = [
    "markdown-exec>=1.10.3",
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-git-revision-date-localized-plugin>=1.4.5",
    "mkdocs-macros-plugin>=1.3.7",
    "mkdocs-material>=9.6.13",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.10",
]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"

[tool.hatch.build.hooks.version]
path = "pyjelly/_version.py"
template = '''__version__ = "{version}"
'''

[tool.uv]
required-version = "~=0.7.3"
default-groups = ["dev", "extras", "test", "types"]

[tool.mypy]
strict = true
explicit_package_bases = true
exclude = [
    "build/",
    "docs/",
    ".*_pb2(_grpc)?\\.pyi?",
    "examples/"
]

[[tool.mypy.overrides]]
module = "google.protobuf.proto"
ignore_errors = true
ignore_missing_imports = true

[tool.ruff.lint.isort]
extra-standard-library = ["typing_extensions"]

[tool.pytest.ini_options]
pythonpath = "."
addopts = ["--import-mode=importlib", "--doctest-modules", "--ignore-glob=**examples"]

[tool.ruff]
extend-exclude = ["*{_pb2,_pb2_grpc}.{py,pyi}"]

[tool.ruff.lint]
extend-per-file-ignores = { "tests/unit_tests/**" = ["PLR2004"] }
exclude = [
    "**examples/**",
]
select = ["ALL"]
ignore = [
    "ANN401",
    "D203",
    "D212",
    "FIX002",
    "ISC001",
    "COM812",
    "INP001",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "S101",
    "TD003",
    "F403",
    "TC",
    "SLF001",
]
